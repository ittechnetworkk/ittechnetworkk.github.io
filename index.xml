<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ittechnetworkk</title>
    <link>https://ittechnetworkk.github.io/</link>
    <description>Recent content on ittechnetworkk</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <copyright>ittechnetworkk</copyright>
    <lastBuildDate>Thu, 05 Dec 2024 22:55:21 +0100</lastBuildDate>
    <atom:link href="https://ittechnetworkk.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>About</title>
      <link>https://ittechnetworkk.github.io/about/</link>
      <pubDate>Thu, 05 Dec 2024 22:55:21 +0100</pubDate>
      <guid>https://ittechnetworkk.github.io/about/</guid>
      <description>&lt;p&gt;COMING SOON&lt;/p&gt;</description>
    </item>
    <item>
      <title>Juniper Rollback</title>
      <link>https://ittechnetworkk.github.io/posts/junosrollback/junos-rollback/</link>
      <pubDate>Fri, 22 Nov 2024 22:57:40 +0100</pubDate>
      <guid>https://ittechnetworkk.github.io/posts/junosrollback/junos-rollback/</guid>
      <description>&lt;p&gt;Rollback, cihazda yapılan önceki konfigürasyonlara dönebilmeyi sağlayan komuttur. Örneğin cihazda bir konfigürasyon yaptık ve commit ettik. Fakat yapılan konfigürasyon hatalıydı veya başka bir sebepten dolayı eski konfigürasyonu bir şekilde geri almamız gerekiyor. Bu durumda Rollback kullanılır.&lt;/p&gt;&#xA;&lt;p&gt;Rollback dosyalar 50 adettir, 0&amp;rsquo;dan başlar ve sıfırıncı dosya cihazda hali hazırda çalışan konfigürasyon dosyasıdır.&lt;/p&gt;&#xA;&lt;p&gt;Cihaz&amp;rsquo;da 49 Rollback dosyası olması halinde her commit işleminde 49. Rollback dosyasını uçurur.&lt;/p&gt;&#xA;&lt;p&gt;Rollback dosyalarını görmek için;&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;{master:0}[edit]&#xA;root@vqfx-re# rollback ?             &#xA;Possible completions:&#xA;  &amp;lt;[Enter]&amp;gt;            Execute this command&#xA;  0                    2024-10-07 02:20:28 UTC by root via cli &#xA;  1                    2024-10-07 02:20:20 UTC by root via cli &#xA;  2                    2024-10-07 02:20:19 UTC by root via cli &#xA;  3                    2024-10-07 02:20:18 UTC by root via cli &#xA;  4                    2024-10-07 02:20:17 UTC by root via cli &#xA;  5                    2024-10-07 02:19:57 UTC by root via cli &#xA;  6                    2024-10-07 02:19:37 UTC by root via cli &#xA;  7                    2024-10-07 02:19:34 UTC by root via cli &#xA;  8                    2024-10-07 02:12:37 UTC by root via cli &#xA;  9                    2020-08-19 17:30:33 UTC by root via cli &#xA;  10                   2020-08-19 17:22:59 UTC by root via other &#xA;  |                    Pipe through a command&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Yukarıda görüldüğü gibi, Rollback dosyalarının tarih, saat, kim tarafından, vs. bilgilerini görebiliyoruz. Sıfırıncı dosya çalışan konfigürasyon dosyasıdır.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Juniper Commit Usage</title>
      <link>https://ittechnetworkk.github.io/posts/junos-commit-usage/junos-commit-usage/</link>
      <pubDate>Fri, 22 Nov 2024 17:53:48 +0100</pubDate>
      <guid>https://ittechnetworkk.github.io/posts/junos-commit-usage/junos-commit-usage/</guid>
      <description>&lt;p&gt;JunOS sistemlerde bir diğer önemli konu ise Commit kullanımıdır.&lt;/p&gt;&#xA;&lt;p&gt;JunOS&amp;rsquo;da commit işlemi, yapılan konfigürasyonu etkinleştirmek için kullanılır. Yani yapılan konfigürasyonu commit etmezsek yaptığımız konfigürasyon geçerli olmaz.&lt;/p&gt;&#xA;&lt;p&gt;Bundan dolayı mutlaka konfigürasyon sonrası commit etmemiz gerekiyor.&lt;/p&gt;&#xA;&lt;p&gt;Commit işlemi yaparken bazı parametreler var ki işleri kolaylaştırır.&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Commit tipleri:&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;&amp;ldquo;commit&amp;rdquo;&lt;/strong&gt; : Bu komut, direkt olarak yapılan konfigürasyonu etkileştirir.&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;&amp;ldquo;commit check&amp;rdquo;&lt;/strong&gt; : Bu komut, yapılan konfigürasyondan emin olmadığımız durumlarda, yapılan konfigürasyonun doğruluğunu kontrol eder. Eğer bir konfigürasyon hatası varsa bize ilgili kısmın hatasını gösterir.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Juniper CLI Help Komutları</title>
      <link>https://ittechnetworkk.github.io/posts/junosclihelpcommands/junos-cli-help-commands/</link>
      <pubDate>Sat, 16 Nov 2024 22:57:40 +0100</pubDate>
      <guid>https://ittechnetworkk.github.io/posts/junosclihelpcommands/junos-cli-help-commands/</guid>
      <description>&lt;p&gt;JunOS&amp;rsquo;da Cli yardım alma komutları oldukça detaylı ve kullanışlıdır. Junos sadece bir işletim sistemi değil aynı zamanda içinde bir kütüphanedir.&lt;/p&gt;&#xA;&lt;p&gt;JunOS&amp;rsquo;da birden fazla yardım alma komutu vardır ve her biri birbirinden kulanıcı dostudur.&lt;/p&gt;&#xA;&lt;p&gt;Cli Help Komutları:&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;root&amp;gt; help ?   &#xA;Possible completions:&#xA;  &amp;lt;[Enter]&amp;gt;            Execute this command&#xA;  apropos              Find help information about a topic&#xA;  reference            Reference material&#xA;  syslog               System log error messages&#xA;  tip                  Tip for the day&#xA;  topic                Help for high level topics&#xA;  |                    Pipe through a command&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Help komutlarıyla birlikte ne kullanılacağını &amp;ldquo;help ?&amp;rdquo; komutuyla görebiliriz.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Juniper Filtering Output</title>
      <link>https://ittechnetworkk.github.io/posts/junosfilteringoutput/junos-filtering-output/</link>
      <pubDate>Sat, 16 Nov 2024 22:57:40 +0100</pubDate>
      <guid>https://ittechnetworkk.github.io/posts/junosfilteringoutput/junos-filtering-output/</guid>
      <description>&lt;p&gt;JunOS işletim sisteminde çıktıları filtrelemek çoğu zaman hayat kurtarır. JunOS&amp;rsquo;da bazı çıktılar çok uzun olabiliyor, bu çıktıları filtrelemek amacımıza ulaşmak için zamandan tasarruf sağlıyor.&lt;/p&gt;&#xA;&lt;p&gt;JunOS FreeBSD tabanlı olduğu için Linux işletim sistemi bilenler için komutlara aşağı yukarı aşinalık gösterir.&lt;/p&gt;&#xA;&lt;p&gt;Linux bilen JunOS&amp;rsquo;da ve benzeri sistemlerde bir şekilde yolunu bulur.&lt;/p&gt;&#xA;&lt;p&gt;Çıktıları filtrelemek JunOS&amp;rsquo;da oldukça kolaydır. Aşağıdaki filtreleme komutlarını ve açıklamalarını görebilirsiniz.&lt;/p&gt;&#xA;&lt;p&gt;Çıktıları filtrelemek için temel olarak pipe &amp;ldquo;|&amp;rdquo; komutu ve devamında amaca uygun komutu kullanmak işi çözecektir.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Juniper Shortcuts</title>
      <link>https://ittechnetworkk.github.io/posts/junosshortcuts/junos-shortcuts/</link>
      <pubDate>Sat, 16 Nov 2024 17:53:48 +0100</pubDate>
      <guid>https://ittechnetworkk.github.io/posts/junosshortcuts/junos-shortcuts/</guid>
      <description>&lt;p&gt;Junos Shortcuts, JunOS CLI ekranında bize pratiklik sağlayan kısayollardır. Başlıcaları aşağıdaki gibidir.&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;CTRL + b:&#xA;İmleci bir karakter sola kaydırır.&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;CTRL + f:&#xA;İmleci bir karakter sağa kaydırır.&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;CTRL + a:&#xA;İmleci satır en başına getirir.&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;CTRL + e:&#xA;İmleci satırın en sonuna getirir.&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;CTRL + d:&#xA;İmlecin sağından bir karakter siler.&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;CTRL + k:&#xA;İmlecin sağındaki her şeyi siler.&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;CTRL + u:&#xA;Tüm satırı siler.&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;CTRL + w:&#xA;İmlecin solundan bir kelime/komut siler.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Temel Switch Konfigürasyonu</title>
      <link>https://ittechnetworkk.github.io/posts/switchconfiguration/switch-conf/</link>
      <pubDate>Wed, 26 Jun 2024 17:53:48 +0100</pubDate>
      <guid>https://ittechnetworkk.github.io/posts/switchconfiguration/switch-conf/</guid>
      <description>&lt;p&gt;Merhaba, bu yazıda Cisco bir Switch&amp;rsquo;in temel bir konfigürasyonunu göstereceğim.&lt;/p&gt;&#xA;&lt;p&gt;Tabi bu konfigürasyonları temel düzelde uygulayacağım, daha kapsamlı konfigürasyon network yapılarına göre, kullanılan teknolojilere göre değişiklik gösterecektir.&lt;/p&gt;&#xA;&lt;p&gt;Uygulayacağım konfigürasyonları sırasıyla aşağıdaki gibi olacaktır:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Hostname,&lt;/li&gt;&#xA;&lt;li&gt;Zaman Konfigürasyonu,&lt;/li&gt;&#xA;&lt;li&gt;Yanlış Girilen Parola Politikası,&lt;/li&gt;&#xA;&lt;li&gt;Enable Password,&lt;/li&gt;&#xA;&lt;li&gt;Banner motd,&lt;/li&gt;&#xA;&lt;li&gt;Kullanıcı Oluşturma,&lt;/li&gt;&#xA;&lt;li&gt;Console Erişimi,&lt;/li&gt;&#xA;&lt;li&gt;SSH Konfigürasyonu,&lt;/li&gt;&#xA;&lt;li&gt;Default Gateway,&lt;/li&gt;&#xA;&lt;li&gt;Disable Ports,&lt;/li&gt;&#xA;&lt;li&gt;Konfigürasyonları Kaydetme,&lt;/li&gt;&#xA;&lt;li&gt;Kontrol.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;Başlayalım.&lt;/p&gt;&#xA;&lt;p&gt;Ben konfigürasyonları, Cisco Catalyst 2960 Serisi bir Switch üzerinde uygulayacağım.&lt;/p&gt;&#xA;&lt;p&gt;Console Kablosu  ve Switch görüntü itibariyle aşağıdaki gibidir.&lt;/p&gt;</description>
    </item>
    <item>
      <title>GRE Tunnel</title>
      <link>https://ittechnetworkk.github.io/posts/gretunnel/gre-tunnel/</link>
      <pubDate>Fri, 07 Jun 2024 17:53:48 +0100</pubDate>
      <guid>https://ittechnetworkk.github.io/posts/gretunnel/gre-tunnel/</guid>
      <description>&lt;p&gt;GRE(Generic Routing Encapsulation) Protokolü, paketin kaynaktan hedefe, oluşturulan tünel sayesinde iletilmesini sağlayan protokoldür.&#xA;GRE, Cisco tarafından geliştirilmiştir.&#xA;GRE kullanarak birden fazla şubesi olan networkler birleştirilebilir.&#xA;Fakat oluşturulan tünelden iletilen paketler okunabilir şekilde iletilir. Yani araya girip trafik dinlenirse, paketler okunabilir. Bu tünel daha sonra güvenli hale de getirilebilir.&#xA;GRE, IP paketini kapsüle ederek yönlendirme yapar.&#xA;Enkapsülasyon yapılırken IP başlığına(20), 4 Byte GRE başlık bilgisi eklenir.&lt;/p&gt;&#xA;&lt;p&gt;Aşağıdaki GRE Lab Topolojisini uygulayacağım.&lt;/p&gt;</description>
    </item>
    <item>
      <title>EtherChannel</title>
      <link>https://ittechnetworkk.github.io/posts/etherchannel/etherchannel/</link>
      <pubDate>Fri, 22 Mar 2024 22:57:40 +0100</pubDate>
      <guid>https://ittechnetworkk.github.io/posts/etherchannel/etherchannel/</guid>
      <description>&lt;p&gt;EtherChannel Protokolü switchlerin birden fazla fiziksel portunu tek bir mantıksal port yapan protokoldür. Yapılmasının amacı şudur örneğin iki switch arasına 4 kablo çekip bırakırsak Stp (Spanning Tree Protocol) devreye girecek ve bu portlardan bazılarını kapatacaktır loop&amp;rsquo;u engellemek için. Eğer EtherChannel yaparsak bu portlar tek bir mantıksal port gibi görünecektir ve STP&amp;rsquo;ye gerek kalmayacaktır. Konfigüre etmek için karşılıklı portların yapısı aynı olmalıdır. Örneğin bir taraf GigabitEthernet diğeri FastEthernet olamaz.&#xA;3 EtherChannel Protokolü vardır:&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
